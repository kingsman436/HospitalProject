#include <iostream>
#include<string>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

struct node
{
    string data;
    node* next;
    node* prev;
    int pain;
};

struct PriorityQueue{
    struct node* front;
    struct node* rear;
    int size;
};
struct PriorityQueue* newQueue(){
    struct PriorityQueue* q = (struct PriorityQueue*)malloc(sizeof(struct PriorityQueue));
    if (q == NULL)
    {
        cout <<  "Memory overflow, When creating a new Queue" << endl;
    }
    else
    {
        q->front = NULL;
        q->rear = NULL;
        q->size = 0;
    }
    return q;
}

class Queue
{
protected:
    node* head; // the head of the list
    node* tail; // the end of the list 
    int counter;
    doctornode* doctorhead; // the head of the list
    doctornode* doctortail; // the end of the list 
public:
    Queue() // default constrctor 
    {
        counter = 0;
        head = tail = NULL;
    }
};

class patientpriorityqueue : public Queue {
    void priorityenqueue(struct PriorityQueue* q, string data, int pain)
    {
        //Create a dynamic node
        struct node* node = (struct node*)malloc(sizeof(struct node));
        if (node == NULL)
        {
            cout <<  "Memory overflow, When creating a new Queue Node"<<endl;
        }
        else
        {
            // Set node value
            node->data = data;
            node->pain = pain;
            node->next = NULL;
            node->prev = NULL;
            if (q->front == NULL)
            {
                // When adding a first node of queue
                q->front = node;
                q->rear = node;
            }
            else if (q->front->data <= data)
            {
                // Add node at beginning position
                node->next = q->front;
                q->front->prev = node;
                q->front = node;
            }
            else if (q->rear->data >= data)
            {
                // Add node at last position
                node->prev = q->rear;
                q->rear->next = node;
                q->rear = node;
            }
            else
            {
                struct node* temp = q->front;
                // Find the location of inserting priority node
                while (temp->data > data)
                {
                    temp = temp->next;
                }
                // Add node
                node->next = temp;
                node->prev = temp->prev;
                temp->prev = node;
                if (node->prev != NULL)
                {
                    node->prev->next = node;
                }
            }
            q->size = q->size + 1;
        }
    }
    int priorityisEmpty(struct PriorityQueue* q)
    {
        if (q->size == 0)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    string peek(struct PriorityQueue* q)
    {
        if (priorityisEmpty(q) == 1)
        {
            // When stack is empty
            return "No patients";
        }
        else
        {
            return q->front->data;
        }
    }
    int isSize(struct PriorityQueue* q)
    {
        return q->size;
    }
    int dequeue(struct PriorityQueue* q)
    {
        if (priorityisEmpty(q) == 1)
        {
            cout << "Empty Queue " << endl;
            // When queue is empty
            return -1;
        }
        else
        {
            string data = peek(q);
            struct node* temp = q->front;
            if (q->front == q->rear)
            {
                // When queue contains only one node
                q->rear = NULL;
                q->front = NULL;
            }
            else
            {
                q->front = q->front->next;
                q->front->prev = NULL;
            }
            // Change queue size
            q->size--;
            free(temp);
        }
    }
    void printQdata(struct PriorityQueue* q)
    {
        struct node* node = q->front;
        cout << "Priority Patients: " << endl;
        while (node != NULL)
        {
            cout << node->data << endl;
            node = node->next;
        }
        cout << endl;
    }
    void sort pQueue(struct PriorityQueue* q)
    {
        
        struct node* node = q->front;
        priority_queue<int> p1;
        while (node != NULL)
        {
            p1.push(p->pain)
            node = node->next;
        }
        while(p1.isempty()!)
        {
            int key=p1.pop();
            if(key==q->head->pain)
            {
                /*node* temp = front;
                front = front->next;
                temp = NULL;*/
                node = node -> next 
            }
            else if(key==q->pain)
            {
                node* temp2 = node;
            }
            
        }
        
    }
};

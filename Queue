#include <iostream>
#include<string>
using namespace std;
struct node
{
    string data;
    node* next;
    node* prev;
};
enum MENU { Insert = 1, Delete = 2, Move = 3, Exit = 4 };
class DoublyIntegerLinkedList
{
private:
    node* head; // the head of the list
    node* tail; // the end of the list 
    int counter;
public:
    DoublyIntegerLinkedList() // default constrctor 
    {
        counter = 0;
        head = tail = NULL;
    }
    void displaySize()
    {
        cout << "The current nodes in the list is: " << counter << endl;
    }
    void createNode(string value)
    {
        node* x = new node(); // the new node
        x->data = value;
        x->next = NULL;
        x->prev = NULL;
        if (head == NULL) // if the list is empty, then make head and tail points 
           // to x
        {
            head = tail = x;
        }
        else // if the list has at least one node, then make the tail points to x
        {
            // (head) 1 <-> 2 (tail) <-> NULL
            // add a new item 3
            // (head) 1 <-> 2 <-> 3 (tail) <-> NULL
            tail->next = x; // moves the pointer one step forward
            x->prev = tail;
            tail = x; // makes the tail points to x
        }
        counter++;
    }
    void displayQueue()
    {
        cout << "Here are the items in the list:\n";
        node* i = head;
        while (i != NULL)
        {
            cout << i->data << endl;
            i = i->next; // moves the counter one step ahead
        }
    }
    void displayInReverseOrder()
    {
        cout << "Here are the items in the list in reverse:\n";
        node* i = tail;
        while (i != NULL)
        {
            cout << i->data << endl;
            i = i->prev; // moves the counter one step ahead
        }
    }
    void deleteHead()
    {
        if (head != NULL)
        {
            node* temp = head;
            head = head->next;
            temp = NULL;
            counter--;
        }
        else
        {
            cout << "The list is empty\n";
        }
    }
    void deleteAtPosition(int index)
    {
        if (index == 1) // detele the first item (head)
        {
            deleteHead();
        }
        else // traverse through the list to the target index
        {
            node* target = head;
            node* previous = head;
            for (int i = 1; i < index; i++)
            {
                previous = target;
                target = target->next;
            }
            // (head) 1 <-> 2 <-> 3 (tail)
            previous->next = target->next;
            target->next->prev = previous;
            target = NULL;
            counter--;
        }
    }
    void enqueue(string value) {
        node* x = new node(); // the new node
        x->data = value;
        x->next = NULL;
        x->prev = NULL;
        if (isEmpty()) {
            head = tail = x;
        }
        else {
            x->prev = tail;
            tail->next = x;
            tail = x;
        }
        counter++;
    }
    void dequeue() {
        node* x = head;
        if (isEmpty()) {
            return;
        }
        head = head->next;
        delete x;
        counter--;
    }
    int getSize() {
        return counter;
    }
    bool isEmpty() {
        if (head == NULL) {
            return true;
        }
        return false;
    }
};
int main() {
    int choice = 1;
    bool keep;
    string name;
    DoublyIntegerLinkedList list;
    list.enqueue("John");
    list.enqueue("Mary");
    list.enqueue("Joseph");
    list.enqueue("Justin");
    list.enqueue("Tanisha");
    list.displayQueue();
    while (choice != 4) {
        cout << "What is your would you like to do? " << endl;
        cout << "1.Add Patient 2.Delete Patient 3.Move Patient 4.Stop Program" << endl;
        cin >> choice;
        switch (choice) {
        case Insert:
            cout << "What is patients name?" << endl;
            cin >> name;
            list.enqueue(name);
            list.displayQueue();
            break;
        case Delete:
            cout << "Removing next Patient" << endl;
            list.dequeue();
            list.displayQueue();
            break;
        case Move:
            break;
        default:
            choice = 4;
            break;
        }
    }
}
